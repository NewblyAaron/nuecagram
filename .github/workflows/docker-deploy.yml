name: Build and Deploy to Docker Hub

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

permissions:
  contents: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: ./gradlew buildImage

      - name: Load Docker image
        run: docker load -i build/jib/nuecagram-jib-image.tar

      - name: Build & Tag Docker image
        run: |
          image_tag=${GITHUB_REF#refs/tags/}
          docker tag nuecagram-docker-image:latest raquezha/nuecagram:$image_tag
          docker tag nuecagram-docker-image:latest raquezha/nuecagram:latest
          if [ $? -ne 0 ]; then
            echo "Failed to tag Docker image."
            exit 1
          fi

      - name: Push Docker image
        run: |
          image_tag=${GITHUB_REF#refs/tags/}
          docker push raquezha/nuecagram:$image_tag
          docker push raquezha/nuecagram:latest
          if [ $? -ne 0 ]; then
            echo "Failed to push Docker image."
            exit 1
          fi

      - name: Build Project
        run: ./gradlew build

      - name: List release directory contents (optional)
        run: |
          ls build
          ls build/jib
          ls build/libs

      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          gh release create "$tag" \
             --repo="$GITHUB_REPOSITORY" \
             --title="${tag#v}" \
             --notes "Release ${tag#v}" \
             --generate-notes
          upload_url=$(gh api "/repos/${GITHUB_REPOSITORY}/releases/tags/${tag}" --jq '.upload_url')
          echo "upload_url=${upload_url}" >> $GITHUB_ENV

      - name: Upload fat jar artifact
        id: upload-release-asset-fat-jar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.upload_url }}
          asset_path: build/libs/nuecagram-fat.jar
          asset_name: nuecagram-${{ github.ref_name }}-fat.jar
          asset_content_type: application/java-archive

      - name: Upload jib artifact
        uses: actions/upload-artifact@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.upload_url }}
          asset_path: build/jib/nuecagram-jib-image.tar
          asset_name: net.raquezha.nuecagram.jib.tar
          asset_content_type: application/x-tar
